name: AI Multi-Platform Shorts Pipeline (Smart Scheduled)

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to upload to (comma-separated: youtube,tiktok,instagram,facebook)'
        required: false
        default: 'youtube,facebook'
      force_all:
        description: 'Force upload to all enabled platforms'
        required: false
        type: boolean
        default: false
      ignore_schedule:
        description: 'Ignore optimal timing and post immediately'
        required: false
        type: boolean
        default: false
  
  schedule:
    # This schedule is based on your optimal times in WAT (West Africa Time, UTC+1).
    # GitHub cron jobs run in UTC, so all times are correctly set to be 1 hour earlier than WAT.
    # Your current configuration is valid and requires no changes.
    
    # ===== MONDAY =====
    # 14:00 WAT -> 13:00 UTC (High - Productivity)
    - cron: '0 13 * * 1'
    # 19:00 WAT -> 18:00 UTC (Medium - Trending)
    - cron: '0 18 * * 1'
    
    # ===== TUESDAY (BEST DAY) ===== ⭐⭐⭐
    # 13:00 WAT -> 12:00 UTC (HIGHEST - AI Tools)
    - cron: '0 12 * * 2'
    # 14:00 WAT -> 13:00 UTC (High - Tech News)
    - cron: '0 13 * * 2'
    
    # ===== WEDNESDAY =====
    # 13:00 WAT -> 12:00 UTC (High - Brain Hacks)
    - cron: '0 12 * * 3'
    # 16:00 WAT -> 15:00 UTC (Medium - Productivity)
    - cron: '0 15 * * 3'
    
    # ===== THURSDAY =====
    # 19:00 WAT -> 18:00 UTC (High - Surprise)
    - cron: '0 18 * * 4'
    # 20:00 WAT -> 19:00 UTC (Medium - Entertainment)
    - cron: '0 19 * * 4'
    
    # ===== FRIDAY =====
    # 17:00 WAT -> 16:00 UTC (Medium - Lifestyle)
    - cron: '0 16 * * 5'
    # 19:00 WAT -> 18:00 UTC (Medium - Entertainment)
    - cron: '0 18 * * 5'
    
    # ===== SATURDAY =====
    # 14:00 WAT -> 13:00 UTC (Low - Lifestyle)
    - cron: '0 13 * * 6'
    # 20:00 WAT -> 19:00 UTC (Low - Motivation)
    - cron: '0 19 * * 6'
    
    # ===== SUNDAY =====
    # 20:00 WAT -> 19:00 UTC (Low - Motivation)
    - cron: '0 19 * * 0'
    # 21:00 WAT -> 20:00 UTC (Low - Mindset)
    - cron: '0 20 * * 0'

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: python .github/scripts/validate_secrets.py

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python packages (for scheduler check)
        run: |
          python -m pip install --upgrade pip
          pip install pytz

      - name: 🎯 Check optimal posting time
        id: schedule_check
        env:
          IGNORE_SCHEDULE: ${{ github.event.inputs.ignore_schedule }}
        run: python .github/scripts/optimal_scheduler.py
        
      - name: Display scheduling decision
        run: |
          echo "📅 Current Time: ${{ steps.schedule_check.outputs.current_time }}"
          echo "🎯 Should Post: ${{ steps.schedule_check.outputs.should_post }}"
          echo "⭐ Priority: ${{ steps.schedule_check.outputs.priority }}"

      - name: Skip if not optimal time
        if: steps.schedule_check.outputs.should_post != 'true'
        run: |
          echo "⏸️ Skipping run - not within optimal posting window or not a forced manual run."
          echo "💡 This workflow will only post if triggered by a specific schedule or if 'ignore_schedule' is set to true."
          exit 0
          
      - name: Cache apt packages
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ai_shorts_trending.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system deps
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libsm6 \
            libxext6 \
            imagemagick \
            fonts-dejavu-core \
            fonts-liberation \
            fonts-freefont-ttf \
            espeak-ng
          echo "📝 Available fonts:"
          fc-list | grep -i dejavu | head -3
          fc-list | grep -i liberation | head -3

      - name: Cache Coqui models
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/tts
          key: coqui-models-${{ runner.os }}

      - name: Make tmp folder
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          mkdir -p tmp
          chmod -R 777 tmp

      - name: Restore platform config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/platform_config.json
          key: platform-config-${{ github.run_number }}
          restore-keys: |
            platform-config-

      - name: Restore playlist config
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/playlist_config.json
          key: playlist-config-${{ github.run_number }}
          restore-keys: |
            playlist-config-

      - name: Restore content history
        if: steps.schedule_check.outputs.should_post == 'true'
        uses: actions/cache/restore@v4
        with:
          path: tmp/content_history.json
          key: content-history-${{ github.run_number }}
          restore-keys: |
            content-history-

      - name: Install Python packages
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fetch trending topics
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python .github/scripts/fetch_trending.py

      - name: Generate trending topic & script
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python .github/scripts/generate_trending_and_script.py

      - name: Generate TTS (Local Coqui)
        if: steps.schedule_check.outputs.should_post == 'true'
        run: python .github/scripts/generate_tts.py

      - name: Create video
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        run: python .github/scripts/create_video.py

      - name: Generate thumbnail
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        run: python .github/scripts/generate_thumbnail.py

      - name: Clean up temporary files
        if: steps.schedule_check.outputs.should_post == 'true'
        run: |
          find tmp -name "scene_*.jpg" -type f -delete || true
          rm -f tmp/short_ready.mp4 || true

      - name: Upload to multiple platforms
        if: steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          TIKTOK_ACCESS_TOKEN: ${{ secrets.TIKTOK_ACCESS_TOKEN }}
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
          INSTAGRAM_ACCOUNT_ID: ${{ secrets.INSTAGRAM_ACCOUNT_ID }}
          TEMP_VIDEO_URL: ${{ secrets.TEMP_VIDEO_URL }}
          FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
          FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
          PLATFORMS: ${{ github.event.inputs.platforms }}
          FORCE_ALL: ${{ github.event.inputs.force_all }}
        run: python .github/scripts/upload_multiplatform.py
      
      - name: Find actual video file
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: find_video
        run: |
          if [ -f tmp/short.mp4 ]; then
            VIDEO_PATH="tmp/short.mp4"
          else
            VIDEO_PATH=$(find tmp -name "*.mp4" -type f | head -n 1)
          fi
          if [ -z "$VIDEO_PATH" ]; then echo "❌ No video file found!"; exit 1; fi
          VIDEO_PATH=$(realpath "$VIDEO_PATH")
          echo "video_path=$VIDEO_PATH" >> $GITHUB_OUTPUT
          echo "video_name=$(basename $VIDEO_PATH)" >> $GITHUB_OUTPUT
          echo "✅ Video validated: $VIDEO_PATH"
      
      - name: Prepare Make.com payload
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: makecom_prep
        run: |
          TITLE=$(jq -r '.title' tmp/script.json)
          DESCRIPTION=$(jq -r '.description' tmp/script.json)
          HASHTAGS=$(jq -r '.hashtags | join(" ")' tmp/script.json)
          VIDEO_PATH="${{ steps.find_video.outputs.video_path }}"
          VIDEO_SIZE=$(stat -c%s "$VIDEO_PATH" 2>/dev/null || stat -f%z "$VIDEO_PATH")
          YOUTUBE_URL=""
          FACEBOOK_URL=""
          if [ -f tmp/multiplatform_log.json ]; then
            YOUTUBE_URL=$(jq -r '.[-1].results[] | select(.platform=="youtube") | .url // ""' tmp/multiplatform_log.json)
            FACEBOOK_URL=$(jq -r '.[-1].results[] | select(.platform=="facebook") | .url // ""' tmp/multiplatform_log.json)
          fi
          cat > tmp/makecom_payload.json <<EOF
          {
            "title": "$TITLE",
            "description": "$DESCRIPTION",
            "hashtags": "$HASHTAGS",
            "video_name": "$(basename $VIDEO_PATH)",
            "video_size_mb": $(echo "scale=2; $VIDEO_SIZE/1024/1024" | bc),
            "workflow_run": "${{ github.run_number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "platform_urls": {
              "youtube": "$YOUTUBE_URL",
              "facebook": "$FACEBOOK_URL"
            }
          }
          EOF
          echo "✅ Make.com payload prepared"

      - name: Upload video to Cloudinary for Make.com
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        id: upload_temp
        env:
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          VIDEO_TO_UPLOAD: ${{ steps.find_video.outputs.video_path }}
        run: |
          echo "📤 Uploading video to Cloudinary..."
          python .github/scripts/upload_to_cloudinary.py
          VIDEO_URL=$(cat tmp/video_url.txt)
          echo "video_url=$VIDEO_URL" >> $GITHUB_OUTPUT
          echo "✅ Video URL: $VIDEO_URL"

      - name: Send to Make.com webhook
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        run: |
          PAYLOAD=$(cat tmp/makecom_payload.json)
          VIDEO_URL="${{ steps.upload_temp.outputs.video_url }}"
          VIDEO_NAME="${{ steps.find_video.outputs.video_name }}"
          curl -X POST "${{ secrets.MAKECOM_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"video_url\": \"$VIDEO_URL\",
              \"video_name\": \"$VIDEO_NAME\",
              \"metadata\": $PAYLOAD,
              \"artifact_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"github\": {
                \"run_id\": \"${{ github.run_id }}\",
                \"run_number\": \"${{ github.run_number }}\",
                \"repository\": \"${{ github.repository }}\"
              }
            }"
          echo "✅ Webhook sent to Make.com"

      - name: Organize YouTube playlists
        if: success() && steps.schedule_check.outputs.should_post == 'true'
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: python .github/scripts/manage_playlists.py

      - name: Save platform config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/platform_config.json
          key: platform-config-${{ github.run_number }}

      - name: Save playlist config
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/playlist_config.json
          key: playlist-config-${{ github.run_number }}

      - name: Save content history
        uses: actions/cache/save@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          path: tmp/content_history.json
          key: content-history-${{ github.run_number }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.schedule_check.outputs.should_post == 'true'
        with:
          name: latest-short-${{ github.run_number }}
          path: |
            tmp/*.mp4
            tmp/thumbnail.png
            tmp/script.json
            tmp/content_history.json
            tmp/playlist_config.json
            tmp/platform_config.json
            tmp/multiplatform_log.json
            tmp/posting_schedule.json
            tmp/voice.mp3
          retention-days: 30

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ github.run_number }}
          path: tmp/*.log
          retention-days: 7

      - name: Post-run summary
        if: always()
        run: |
          echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** ${{ steps.schedule_check.outputs.current_time }}" >> $GITHUB_STEP_SUMMARY
          echo "**Posted:** ${{ steps.schedule_check.outputs.should_post }}" >> $GITHUB_STEP_SUMMARY
          echo "**Priority:** ${{ steps.schedule_check.outputs.priority }}" >> $GITHUB_STEP_SUMMARY
          echo "**Content Type:** ${{ steps.schedule_check.outputs.content_type }}" >> $GITHUB_STEP_SUMMARY