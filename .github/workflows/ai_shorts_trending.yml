name: AI Multi-Platform Shorts Pipeline

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to upload to (comma-separated: youtube,tiktok,instagram,facebook)'
        required: false
        default: 'youtube'
      force_all:
        description: 'Force upload to all enabled platforms'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 14 * * *' # Daily at 14:00 UTC

jobs:
  build_and_upload:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate secrets
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: python .github/scripts/validate_secrets.py

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ai_shorts_trending.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ffmpeg \
            libsm6 \
            libxext6 \
            imagemagick \
            fonts-dejavu-core \
            fonts-liberation \
            fonts-freefont-ttf \
            espeak-ng
          echo "üìù Available fonts:"
          fc-list | grep -i dejavu | head -3
          fc-list | grep -i liberation | head -3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Coqui models
        uses: actions/cache@v4
        with:
          path: ~/.local/share/tts
          key: coqui-models-${{ runner.os }}

      - name: Make tmp folder
        run: |
          mkdir -p tmp
          chmod -R 777 tmp

      - name: Restore platform config
        uses: actions/cache/restore@v4
        with:
          path: tmp/platform_config.json
          key: platform-config-${{ github.run_number }}
          restore-keys: |
            platform-config-

      - name: Restore playlist config
        uses: actions/cache/restore@v4
        with:
          path: tmp/playlist_config.json
          key: playlist-config-${{ github.run_number }}
          restore-keys: |
            playlist-config-

      - name: Restore content history
        uses: actions/cache/restore@v4
        with:
          path: tmp/content_history.json
          key: content-history-${{ github.run_number }}
          restore-keys: |
            content-history-

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Fetch trending topics
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python .github/scripts/fetch_trending.py

      - name: Generate trending topic & script
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python .github/scripts/generate_trending_and_script.py

      - name: Generate TTS (Local Coqui)
        run: python .github/scripts/generate_tts.py

      - name: Create video
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        run: python .github/scripts/create_video.py

      - name: Generate thumbnail
        env:
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        run: python .github/scripts/generate_thumbnail.py

      - name: Clean up temporary files
        run: |
          find tmp -name "scene_*.jpg" -type f -delete || true
          rm -f tmp/short_ready.mp4 || true

      # ===== MULTI-PLATFORM UPLOAD =====
      - name: Upload to multiple platforms
        env:
          # YouTube (always available)
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          # TikTok (optional)
          TIKTOK_ACCESS_TOKEN: ${{ secrets.TIKTOK_ACCESS_TOKEN }}
          # Instagram (optional)
          INSTAGRAM_ACCESS_TOKEN: ${{ secrets.INSTAGRAM_ACCESS_TOKEN }}
          INSTAGRAM_ACCOUNT_ID: ${{ secrets.INSTAGRAM_ACCOUNT_ID }}
          TEMP_VIDEO_URL: ${{ secrets.TEMP_VIDEO_URL }}
          # Facebook (optional)
          FACEBOOK_PAGE_ID: ${{ secrets.FACEBOOK_PAGE_ID }}
          FACEBOOK_ACCESS_TOKEN: ${{ secrets.FACEBOOK_ACCESS_TOKEN }}
          PLATFORMS: ${{ github.event.inputs.platforms }}
          FORCE_ALL: ${{ github.event.inputs.force_all }}
        run: python .github/scripts/upload_multiplatform.py

      # ===== YOUTUBE-SPECIFIC POST-PROCESSING =====
      - name: Organize YouTube playlists
        if: success()
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
        run: python .github/scripts/manage_playlists.py
       
      - name: Verify FFmpeg filters
        run: ffmpeg -filters | grep xfade || echo "‚ö†Ô∏è xfade not found ‚Äî fallback to simple concat mode"

      - name: Save platform config
        uses: actions/cache/save@v4
        if: always()
        with:
          path: tmp/platform_config.json
          key: platform-config-${{ github.run_number }}

      - name: Save playlist config
        uses: actions/cache/save@v4
        if: always()
        with:
          path: tmp/playlist_config.json
          key: playlist-config-${{ github.run_number }}

      - name: Save content history
        uses: actions/cache/save@v4
        if: always()
        with:
          path: tmp/content_history.json
          key: content-history-${{ github.run_number }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: latest-short-${{ github.run_number }}
          path: |
            tmp/*.mp4
            tmp/thumbnail.png
            tmp/script.json
            tmp/content_history.json
            tmp/playlist_config.json
            tmp/platform_config.json
            tmp/multiplatform_log.json
            tmp/voice.mp3
          retention-days: 30

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-${{ github.run_number }}
          path: tmp/*.log
          retention-days: 7